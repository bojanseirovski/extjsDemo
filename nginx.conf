map $http_origin $cors_origin_header {
    default "";
    "~(^|^http:\/\/)(localhost$|localhost:[0-9]{1,4}$)" "$http_origin";
    "http://localhost:1841/" "$http_origin"; 
}

map $http_origin $cors_cred {
    default "";
    "~(^|^http:\/\/)(localhost$|localhost:[0-9]{1,4}$)" "true";
    "http://localhost:1841/" "true"; 
}


server {
    listen [::]:8080 default_server;
    listen 8080 default_server;
    server_name _;

    sendfile off;
    tcp_nodelay on;
    absolute_redirect off;

    root /var/www/html;
    index index.php index.html index.xml;


    error_log  /var/www/html/error_log debug;
    location / {
        add_header 'Access-Control-Allow-Origin' '$cors_origin_header' always;
        add_header 'Access-Control-Allow-Credentials' '$cors_cred' always;
        add_header 'Access-Control-Allow-Methods' "GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS, PATCH" always;
        add_header 'Access-Control-Allow-Headers' "Accept, Accept-Language, Content-Language, Content-Type, Authorization, Origin, Referer, User-Agent, Cache-Control, DNT, If-Modified-Since, Range" always;
        add_header 'Access-Control-Expose-Headers' '*' always;

        if ($request_method = 'OPTIONS' ) {
            add_header 'Access-Control-Allow-Origin' '$cors_origin_header' always;
            add_header 'Access-Control-Max-Age' 1728000;
			add_header 'Content-Type' 'text/plain charset=UTF-8';
			add_header 'Content-Length' 0;
            return 204;
        }
        # First attempt to serve request as file, then
        # as directory, then fall back to index.php
        try_files $uri $uri/ /index.php?q=$uri&$args;
    }
    location ~ \.xml$ {
		add_header Access-Control-Allow-Origin localhost always;
		add_header 'Access-Control-Allow-Credentials' 'true' always;
		add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
		add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
		# required to be able to read Authorization header in frontend
		add_header 'Access-Control-Expose-Headers' 'Authorization' always;

		if ($request_method = 'OPTIONS') {
			# Tell client that this pre-flight info is valid for 20 days
			add_header 'Access-Control-Max-Age' 1728000;
			add_header 'Content-Type' 'text/plain charset=UTF-8';
			add_header 'Content-Length' 0;
			return 204;
		}
        # First attempt to serve request as file, then
        # as directory, then fall back to index.php
        try_files $uri $uri/ /index.xml?q=$uri&$args;
    }

    # Pass the PHP scripts to PHP-FPM listening on php-fpm.sock
    location ~ \.php$ {
        add_header 'Access-Control-Allow-Origin' '$cors_origin_header' always;
        add_header 'Access-Control-Allow-Credentials' '$cors_cred' always;
        add_header 'Access-Control-Allow-Methods' "GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS, PATCH" always;
        add_header 'Access-Control-Allow-Headers' "Accept, Accept-Language, Content-Language, Content-Type, Authorization, Origin, Referer, User-Agent, Cache-Control, DNT, If-Modified-Since, Range, X-Requested-With, Authorization" always;
        add_header 'Access-Control-Expose-Headers' '*' always;

        if ($request_method = 'OPTIONS' ) {
            add_header 'Access-Control-Allow-Origin' '$cors_origin_header' always;
            add_header 'Access-Control-Max-Age' 1728000;
			add_header 'Content-Type' 'text/plain charset=UTF-8';
			add_header 'Content-Length' 0;
            return 204;
        }

        try_files $uri =404;

        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME     $request_filename;
        fastcgi_read_timeout 600;
    }

    # Set the cache-control headers on assets to cache for 5 days
    location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
        expires 5d;
    }

    # Deny access to . files, for security
    location ~ /\. {
        log_not_found off;
        deny all;
    }
}
